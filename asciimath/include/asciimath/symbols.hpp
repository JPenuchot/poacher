#pragma once

#include <asciimath/types.hpp>

#include <algorithm>
#include <array>
#include <iterator>
#include <ranges>
#include <string_view>
#include <vector>

namespace asciimath::symbols {

// Symbol definitions taken from here:
// https://github.com/asciimath/asciimathml/blob/master/ASCIIMathML.js

enum token_kind_t {
  binary_v,
  const_v,
  definition_v,
  infix_v,
  leftbracket_v,
  leftright_v,
  rightbracket_v,
  space_v,
  text_v,
  unary_v,
  unaryunderover_v,
  underover_v,
};

struct symbol_def_t {
  /// AsciiMath representation
  std::string_view input;
  std::string_view tag;
  std::string_view atname = {};
  std::string_view atval = {};
  std::string_view output;
  std::string_view tex;
  token_kind_t kind;
  bool acc = false;
  bool invisible = false;
  bool func = false;
};

static constexpr bool fixphi = false;

/// AsciiMath symbol table
static constexpr symbol_def_t symbol_table[]{
    // some greek symbols
    {
        .input = "alpha",
        .tag = "mi",
        .output = "\u03B1",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "beta",
        .tag = "mi",
        .output = "\u03B2",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "chi",
        .tag = "mi",
        .output = "\u03C7",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "delta",
        .tag = "mi",
        .output = "\u03B4",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "Delta",
        .tag = "mo",
        .output = "\u0394",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "epsi",
        .tag = "mi",
        .output = "\u03B5",
        .tex = "epsilon",
        .kind = const_v,
    },
    {
        .input = "varepsilon",
        .tag = "mi",
        .output = "\u025B",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "eta",
        .tag = "mi",
        .output = "\u03B7",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "gamma",
        .tag = "mi",
        .output = "\u03B3",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "Gamma",
        .tag = "mo",
        .output = "\u0393",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "iota",
        .tag = "mi",
        .output = "\u03B9",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "kappa",
        .tag = "mi",
        .output = "\u03BA",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "lambda",
        .tag = "mi",
        .output = "\u03BB",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "Lambda",
        .tag = "mo",
        .output = "\u039B",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "lamda",
        .tag = "mi",
        .output = "\u03BB",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "Lamda",
        .tag = "mo",
        .output = "\u039B",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "mu",
        .tag = "mi",
        .output = "\u03BC",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "nu",
        .tag = "mi",
        .output = "\u03BD",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "omega",
        .tag = "mi",
        .output = "\u03C9",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "Omega",
        .tag = "mo",
        .output = "\u03A9",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "phi",
        .tag = "mi",
        .output = fixphi ? "\u03D5" : "\u03C6",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "varphi",
        .tag = "mi",
        .output = fixphi ? "\u03C6" : "\u03D5",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "Phi",
        .tag = "mo",
        .output = "\u03A6",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "pi",
        .tag = "mi",
        .output = "\u03C0",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "Pi",
        .tag = "mo",
        .output = "\u03A0",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "psi",
        .tag = "mi",
        .output = "\u03C8",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "Psi",
        .tag = "mi",
        .output = "\u03A8",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "rho",
        .tag = "mi",
        .output = "\u03C1",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "sigma",
        .tag = "mi",
        .output = "\u03C3",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "Sigma",
        .tag = "mo",
        .output = "\u03A3",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "tau",
        .tag = "mi",
        .output = "\u03C4",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "theta",
        .tag = "mi",
        .output = "\u03B8",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "vartheta",
        .tag = "mi",
        .output = "\u03D1",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "Theta",
        .tag = "mo",
        .output = "\u0398",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "upsilon",
        .tag = "mi",
        .output = "\u03C5",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "xi",
        .tag = "mi",
        .output = "\u03BE",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "Xi",
        .tag = "mo",
        .output = "\u039E",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "zeta",
        .tag = "mi",
        .output = "\u03B6",
        .tex = {},
        .kind = const_v,
    },

    // binary operation symbols
    //{.input="-",  .tag="mo", .output="\u0096", .tex={}, .kind=const_v,},
    {
        .input = "*",
        .tag = "mo",
        .output = "\u22C5",
        .tex = "cdot",
        .kind = const_v,
    },
    {
        .input = "**",
        .tag = "mo",
        .output = "\u2217",
        .tex = "ast",
        .kind = const_v,
    },
    {
        .input = "***",
        .tag = "mo",
        .output = "\u22C6",
        .tex = "star",
        .kind = const_v,
    },
    {
        .input = "//",
        .tag = "mo",
        .output = "/",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "\\\\",
        .tag = "mo",
        .output = "\\",
        .tex = "backslash",
        .kind = const_v,
    },
    {
        .input = "setminus",
        .tag = "mo",
        .output = "\\",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "xx",
        .tag = "mo",
        .output = "\u00D7",
        .tex = "times",
        .kind = const_v,
    },
    {
        .input = "|><",
        .tag = "mo",
        .output = "\u22C9",
        .tex = "ltimes",
        .kind = const_v,
    },
    {
        .input = "><|",
        .tag = "mo",
        .output = "\u22CA",
        .tex = "rtimes",
        .kind = const_v,
    },
    {
        .input = "|><|",
        .tag = "mo",
        .output = "\u22C8",
        .tex = "bowtie",
        .kind = const_v,
    },
    {
        .input = "-:",
        .tag = "mo",
        .output = "\u00F7",
        .tex = "div",
        .kind = const_v,
    },
    {
        .input = "divide",
        .tag = "mo",
        .output = "-:",
        .tex = {},
        .kind = definition_v,
    },
    {
        .input = "@",
        .tag = "mo",
        .output = "\u2218",
        .tex = "circ",
        .kind = const_v,
    },
    {
        .input = "o+",
        .tag = "mo",
        .output = "\u2295",
        .tex = "oplus",
        .kind = const_v,
    },
    {
        .input = "ox",
        .tag = "mo",
        .output = "\u2297",
        .tex = "otimes",
        .kind = const_v,
    },
    {
        .input = "o.",
        .tag = "mo",
        .output = "\u2299",
        .tex = "odot",
        .kind = const_v,
    },
    {
        .input = "sum",
        .tag = "mo",
        .output = "\u2211",
        .tex = {},
        .kind = underover_v,
    },
    {
        .input = "prod",
        .tag = "mo",
        .output = "\u220F",
        .tex = {},
        .kind = underover_v,
    },
    {
        .input = "^^",
        .tag = "mo",
        .output = "\u2227",
        .tex = "wedge",
        .kind = const_v,
    },
    {
        .input = "^^^",
        .tag = "mo",
        .output = "\u22C0",
        .tex = "bigwedge",
        .kind = underover_v,
    },
    {
        .input = "vv",
        .tag = "mo",
        .output = "\u2228",
        .tex = "vee",
        .kind = const_v,
    },
    {
        .input = "vvv",
        .tag = "mo",
        .output = "\u22C1",
        .tex = "bigvee",
        .kind = underover_v,
    },
    {
        .input = "nn",
        .tag = "mo",
        .output = "\u2229",
        .tex = "cap",
        .kind = const_v,
    },
    {
        .input = "nnn",
        .tag = "mo",
        .output = "\u22C2",
        .tex = "bigcap",
        .kind = underover_v,
    },
    {
        .input = "uu",
        .tag = "mo",
        .output = "\u222A",
        .tex = "cup",
        .kind = const_v,
    },
    {
        .input = "uuu",
        .tag = "mo",
        .output = "\u22C3",
        .tex = "bigcup",
        .kind = underover_v,
    },

    // binary relation symbols
    {
        .input = "!=",
        .tag = "mo",
        .output = "\u2260",
        .tex = "ne",
        .kind = const_v,
    },
    {
        .input = ":=",
        .tag = "mo",
        .output = ":=",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "lt",
        .tag = "mo",
        .output = "<",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "<=",
        .tag = "mo",
        .output = "\u2264",
        .tex = "le",
        .kind = const_v,
    },
    {
        .input = "lt=",
        .tag = "mo",
        .output = "\u2264",
        .tex = "leq",
        .kind = const_v,
    },
    {
        .input = "gt",
        .tag = "mo",
        .output = ">",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "mlt",
        .tag = "mo",
        .output = "\u226A",
        .tex = "ll",
        .kind = const_v,
    },
    {
        .input = ">=",
        .tag = "mo",
        .output = "\u2265",
        .tex = "ge",
        .kind = const_v,
    },
    {
        .input = "gt=",
        .tag = "mo",
        .output = "\u2265",
        .tex = "geq",
        .kind = const_v,
    },
    {
        .input = "mgt",
        .tag = "mo",
        .output = "\u226B",
        .tex = "gg",
        .kind = const_v,
    },
    {
        .input = "-<",
        .tag = "mo",
        .output = "\u227A",
        .tex = "prec",
        .kind = const_v,
    },
    {
        .input = "-lt",
        .tag = "mo",
        .output = "\u227A",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = ">-",
        .tag = "mo",
        .output = "\u227B",
        .tex = "succ",
        .kind = const_v,
    },
    {
        .input = "-<=",
        .tag = "mo",
        .output = "\u2AAF",
        .tex = "preceq",
        .kind = const_v,
    },
    {
        .input = ">-=",
        .tag = "mo",
        .output = "\u2AB0",
        .tex = "succeq",
        .kind = const_v,
    },
    {
        .input = "in",
        .tag = "mo",
        .output = "\u2208",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "!in",
        .tag = "mo",
        .output = "\u2209",
        .tex = "notin",
        .kind = const_v,
    },
    {
        .input = "sub",
        .tag = "mo",
        .output = "\u2282",
        .tex = "subset",
        .kind = const_v,
    },
    {
        .input = "sup",
        .tag = "mo",
        .output = "\u2283",
        .tex = "supset",
        .kind = const_v,
    },
    {
        .input = "sube",
        .tag = "mo",
        .output = "\u2286",
        .tex = "subseteq",
        .kind = const_v,
    },
    {
        .input = "supe",
        .tag = "mo",
        .output = "\u2287",
        .tex = "supseteq",
        .kind = const_v,
    },
    {
        .input = "-=",
        .tag = "mo",
        .output = "\u2261",
        .tex = "equiv",
        .kind = const_v,
    },
    {
        .input = "~=",
        .tag = "mo",
        .output = "\u2245",
        .tex = "cong",
        .kind = const_v,
    },
    {
        .input = "~~",
        .tag = "mo",
        .output = "\u2248",
        .tex = "approx",
        .kind = const_v,
    },
    {
        .input = "~",
        .tag = "mo",
        .output = "\u223C",
        .tex = "sim",
        .kind = const_v,
    },
    {
        .input = "prop",
        .tag = "mo",
        .output = "\u221D",
        .tex = "propto",
        .kind = const_v,
    },

    // logical symbols
    {
        .input = "and",
        .tag = "mtext",
        .output = "and",
        .tex = {},
        .kind = space_v,
    },
    {
        .input = "or",
        .tag = "mtext",
        .output = "or",
        .tex = {},
        .kind = space_v,
    },
    {
        .input = "not",
        .tag = "mo",
        .output = "\u00AC",
        .tex = "neg",
        .kind = const_v,
    },
    {
        .input = "=>",
        .tag = "mo",
        .output = "\u21D2",
        .tex = "implies",
        .kind = const_v,
    },
    {
        .input = "if",
        .tag = "mo",
        .output = "if",
        .tex = {},
        .kind = space_v,
    },
    {
        .input = "<=>",
        .tag = "mo",
        .output = "\u21D4",
        .tex = "iff",
        .kind = const_v,
    },
    {
        .input = "AA",
        .tag = "mo",
        .output = "\u2200",
        .tex = "forall",
        .kind = const_v,
    },
    {
        .input = "EE",
        .tag = "mo",
        .output = "\u2203",
        .tex = "exists",
        .kind = const_v,
    },
    {
        .input = "_|_",
        .tag = "mo",
        .output = "\u22A5",
        .tex = "bot",
        .kind = const_v,
    },
    {
        .input = "TT",
        .tag = "mo",
        .output = "\u22A4",
        .tex = "top",
        .kind = const_v,
    },
    {
        .input = "|--",
        .tag = "mo",
        .output = "\u22A2",
        .tex = "vdash",
        .kind = const_v,
    },
    {
        .input = "|==",
        .tag = "mo",
        .output = "\u22A8",
        .tex = "models",
        .kind = const_v,
    },

    // grouping brackets
    {
        .input = "(",
        .tag = "mo",
        .output = "(",
        .tex = "left(",
        .kind = leftbracket_v,
    },
    {
        .input = ")",
        .tag = "mo",
        .output = ")",
        .tex = "right)",
        .kind = rightbracket_v,
    },
    {
        .input = "[",
        .tag = "mo",
        .output = "[",
        .tex = "left[",
        .kind = leftbracket_v,
    },
    {
        .input = "]",
        .tag = "mo",
        .output = "]",
        .tex = "right]",
        .kind = rightbracket_v,
    },
    {
        .input = "{",
        .tag = "mo",
        .output = "{",
        .tex = {},
        .kind = leftbracket_v,
    },
    {
        .input = "}",
        .tag = "mo",
        .output = "}",
        .tex = {},
        .kind = rightbracket_v,
    },
    {
        .input = "|",
        .tag = "mo",
        .output = "|",
        .tex = {},
        .kind = leftright_v,
    },
    {
        .input = ":|:",
        .tag = "mo",
        .output = "|",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "|:",
        .tag = "mo",
        .output = "|",
        .tex = {},
        .kind = leftbracket_v,
    },
    {
        .input = ":|",
        .tag = "mo",
        .output = "|",
        .tex = {},
        .kind = rightbracket_v,
    },
    {
        .input = "||",
        .tag = "mo",
        .output = "||",
        .tex = {},
        .kind = leftright_v,
    },
    {
        .input = "(:",
        .tag = "mo",
        .output = "\u2329",
        .tex = "langle",
        .kind = leftbracket_v,
    },
    {
        .input = ":)",
        .tag = "mo",
        .output = "\u232A",
        .tex = "rangle",
        .kind = rightbracket_v,
    },
    {
        .input = "<<",
        .tag = "mo",
        .output = "\u2329",
        .tex = {},
        .kind = leftbracket_v,
    },
    {
        .input = ">>",
        .tag = "mo",
        .output = "\u232A",
        .tex = {},
        .kind = rightbracket_v,
    },
    {
        .input = "{:",
        .tag = "mo",
        .output = "{:",
        .tex = {},
        .kind = leftbracket_v,
        .invisible = true,
    },
    {
        .input = ":}",
        .tag = "mo",
        .output = ":}",
        .tex = {},
        .kind = rightbracket_v,
        .invisible = true,
    },

    // miscellaneous symbols
    {
        .input = "int",
        .tag = "mo",
        .output = "\u222B",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "dx",
        .tag = "mi",
        .output = "{:d x:}",
        .tex = {},
        .kind = definition_v,
    },
    {
        .input = "dy",
        .tag = "mi",
        .output = "{:d y:}",
        .tex = {},
        .kind = definition_v,
    },
    {
        .input = "dz",
        .tag = "mi",
        .output = "{:d z:}",
        .tex = {},
        .kind = definition_v,
    },
    {
        .input = "dt",
        .tag = "mi",
        .output = "{:d t:}",
        .tex = {},
        .kind = definition_v,
    },
    {
        .input = "oint",
        .tag = "mo",
        .output = "\u222E",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "del",
        .tag = "mo",
        .output = "\u2202",
        .tex = "partial",
        .kind = const_v,
    },
    {
        .input = "grad",
        .tag = "mo",
        .output = "\u2207",
        .tex = "nabla",
        .kind = const_v,
    },
    {
        .input = "+-",
        .tag = "mo",
        .output = "\u00B1",
        .tex = "pm",
        .kind = const_v,
    },
    {
        .input = "-+",
        .tag = "mo",
        .output = "\u2213",
        .tex = "mp",
        .kind = const_v,
    },
    {
        .input = "O/",
        .tag = "mo",
        .output = "\u2205",
        .tex = "emptyset",
        .kind = const_v,
    },
    {
        .input = "oo",
        .tag = "mo",
        .output = "\u221E",
        .tex = "infty",
        .kind = const_v,
    },
    {
        .input = "aleph",
        .tag = "mo",
        .output = "\u2135",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "...",
        .tag = "mo",
        .output = "...",
        .tex = "ldots",
        .kind = const_v,
    },
    {
        .input = ":.",
        .tag = "mo",
        .output = "\u2234",
        .tex = "therefore",
        .kind = const_v,
    },
    {
        .input = ":'",
        .tag = "mo",
        .output = "\u2235",
        .tex = "because",
        .kind = const_v,
    },
    {
        .input = "/_",
        .tag = "mo",
        .output = "\u2220",
        .tex = "angle",
        .kind = const_v,
    },
    {
        .input = "/_\\",
        .tag = "mo",
        .output = "\u25B3",
        .tex = "triangle",
        .kind = const_v,
    },
    {
        .input = "'",
        .tag = "mo",
        .output = "\u2032",
        .tex = "prime",
        .kind = const_v,
    },
    {
        .input = "tilde",
        .tag = "mover",
        .output = "~",
        .tex = {},
        .kind = unary_v,
        .acc = true,
    },
    {
        .input = "\\ ",
        .tag = "mo",
        .output = "\u00A0",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "frown",
        .tag = "mo",
        .output = "\u2322",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "quad",
        .tag = "mo",
        .output = "\u00A0\u00A0",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "qquad",
        .tag = "mo",
        .output = "\u00A0\u00A0\u00A0\u00A0",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "cdots",
        .tag = "mo",
        .output = "\u22EF",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "vdots",
        .tag = "mo",
        .output = "\u22EE",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "ddots",
        .tag = "mo",
        .output = "\u22F1",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "diamond",
        .tag = "mo",
        .output = "\u22C4",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "square",
        .tag = "mo",
        .output = "\u25A1",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "|__",
        .tag = "mo",
        .output = "\u230A",
        .tex = "lfloor",
        .kind = const_v,
    },
    {
        .input = "__|",
        .tag = "mo",
        .output = "\u230B",
        .tex = "rfloor",
        .kind = const_v,
    },
    {
        .input = "|~",
        .tag = "mo",
        .output = "\u2308",
        .tex = "lceiling",
        .kind = const_v,
    },
    {
        .input = "~|",
        .tag = "mo",
        .output = "\u2309",
        .tex = "rceiling",
        .kind = const_v,
    },
    {
        .input = "CC",
        .tag = "mo",
        .output = "\u2102",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "NN",
        .tag = "mo",
        .output = "\u2115",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "QQ",
        .tag = "mo",
        .output = "\u211A",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "RR",
        .tag = "mo",
        .output = "\u211D",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "ZZ",
        .tag = "mo",
        .output = "\u2124",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "f",
        .tag = "mi",
        .output = "f",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "g",
        .tag = "mi",
        .output = "g",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },

    // standard functions
    {
        .input = "lim",
        .tag = "mo",
        .output = "lim",
        .tex = {},
        .kind = underover_v,
    },
    {
        .input = "Lim",
        .tag = "mo",
        .output = "Lim",
        .tex = {},
        .kind = underover_v,
    },
    {
        .input = "sin",
        .tag = "mo",
        .output = "sin",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "cos",
        .tag = "mo",
        .output = "cos",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "tan",
        .tag = "mo",
        .output = "tan",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "sinh",
        .tag = "mo",
        .output = "sinh",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "cosh",
        .tag = "mo",
        .output = "cosh",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "tanh",
        .tag = "mo",
        .output = "tanh",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "cot",
        .tag = "mo",
        .output = "cot",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "sec",
        .tag = "mo",
        .output = "sec",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "csc",
        .tag = "mo",
        .output = "csc",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "arcsin",
        .tag = "mo",
        .output = "arcsin",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "arccos",
        .tag = "mo",
        .output = "arccos",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "arctan",
        .tag = "mo",
        .output = "arctan",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "coth",
        .tag = "mo",
        .output = "coth",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "sech",
        .tag = "mo",
        .output = "sech",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "csch",
        .tag = "mo",
        .output = "csch",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "exp",
        .tag = "mo",
        .output = "exp",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "abs",
        .tag = "mo",
        .output = "abs",
        .tex = {},
        .kind = unary_v,
        //       rewriteleftright : [ "|", "|" ]
    },
    {
        .input = "norm",
        .tag = "mo",
        .output = "norm",
        .tex = {},
        .kind = unary_v,
        //       rewriteleftright : [ "\u2225", "\u2225" ]
    },
    {
        .input = "floor",
        .tag = "mo",
        .output = "floor",
        .tex = {},
        .kind = unary_v,
        //       rewriteleftright : [ "\u230A", "\u230B" ]
    },
    {
        .input = "ceil",
        .tag = "mo",
        .output = "ceil",
        .tex = {},
        .kind = unary_v,
        //       rewriteleftright : [ "\u2308", "\u2309" ]
    },
    {
        .input = "log",
        .tag = "mo",
        .output = "log",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "ln",
        .tag = "mo",
        .output = "ln",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "det",
        .tag = "mo",
        .output = "det",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "dim",
        .tag = "mo",
        .output = "dim",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "mod",
        .tag = "mo",
        .output = "mod",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "gcd",
        .tag = "mo",
        .output = "gcd",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "lcm",
        .tag = "mo",
        .output = "lcm",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "lub",
        .tag = "mo",
        .output = "lub",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "glb",
        .tag = "mo",
        .output = "glb",
        .tex = {},
        .kind = const_v,
    },
    {
        .input = "min",
        .tag = "mo",
        .output = "min",
        .tex = {},
        .kind = underover_v,
    },
    {
        .input = "max",
        .tag = "mo",
        .output = "max",
        .tex = {},
        .kind = underover_v,
    },
    {
        .input = "Sin",
        .tag = "mo",
        .output = "Sin",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Cos",
        .tag = "mo",
        .output = "Cos",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Tan",
        .tag = "mo",
        .output = "Tan",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Arcsin",
        .tag = "mo",
        .output = "Arcsin",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Arccos",
        .tag = "mo",
        .output = "Arccos",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Arctan",
        .tag = "mo",
        .output = "Arctan",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Sinh",
        .tag = "mo",
        .output = "Sinh",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Cosh",
        .tag = "mo",
        .output = "Cosh",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Tanh",
        .tag = "mo",
        .output = "Tanh",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Cot",
        .tag = "mo",
        .output = "Cot",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Sec",
        .tag = "mo",
        .output = "Sec",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Csc",
        .tag = "mo",
        .output = "Csc",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Log",
        .tag = "mo",
        .output = "Log",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Ln",
        .tag = "mo",
        .output = "Ln",
        .tex = {},
        .kind = unary_v,
        .func = true,
    },
    {
        .input = "Abs",
        .tag = "mo",
        .output = "abs",
        .tex = {},
        .kind = unary_v,
        //       notexcopy : true,
        //       rewriteleftright : [ "|", "|" ]
    },

    // arrows
    {
        .input = "uarr",
        .tag = "mo",
        .output = "\u2191",
        .tex = "uparrow",
        .kind = const_v,
    },
    {
        .input = "darr",
        .tag = "mo",
        .output = "\u2193",
        .tex = "downarrow",
        .kind = const_v,
    },
    {
        .input = "rarr",
        .tag = "mo",
        .output = "\u2192",
        .tex = "rightarrow",
        .kind = const_v,
    },
    {
        .input = "->",
        .tag = "mo",
        .output = "\u2192",
        .tex = "to",
        .kind = const_v,
    },
    {
        .input = ">->",
        .tag = "mo",
        .output = "\u21A3",
        .tex = "rightarrowtail",
        .kind = const_v,
    },
    {
        .input = "->>",
        .tag = "mo",
        .output = "\u21A0",
        .tex = "twoheadrightarrow",
        .kind = const_v,
    },
    {
        .input = ">->>",
        .tag = "mo",
        .output = "\u2916",
        .tex = "twoheadrightarrowtail",
        .kind = const_v,
    },
    {
        .input = "|->",
        .tag = "mo",
        .output = "\u21A6",
        .tex = "mapsto",
        .kind = const_v,
    },
    {
        .input = "larr",
        .tag = "mo",
        .output = "\u2190",
        .tex = "leftarrow",
        .kind = const_v,
    },
    {
        .input = "harr",
        .tag = "mo",
        .output = "\u2194",
        .tex = "leftrightarrow",
        .kind = const_v,
    },
    {
        .input = "rArr",
        .tag = "mo",
        .output = "\u21D2",
        .tex = "Rightarrow",
        .kind = const_v,
    },
    {
        .input = "lArr",
        .tag = "mo",
        .output = "\u21D0",
        .tex = "Leftarrow",
        .kind = const_v,
    },
    {
        .input = "hArr",
        .tag = "mo",
        .output = "\u21D4",
        .tex = "Leftrightarrow",
        .kind = const_v,
    },
    // commands with argument
    {
        .input = "sqrt",
        .tag = "msqrt",
        .output = "sqrt",
        .tex = {},
        .kind = unary_v,
    },
    {
        .input = "root",
        .tag = "mroot",
        .output = "root",
        .tex = {},
        .kind = binary_v,
    },
    {
        .input = "frac",
        .tag = "mfrac",
        .output = "/",
        .tex = {},
        .kind = binary_v,
    },
    {
        .input = "/",
        .tag = "mfrac",
        .output = "/",
        .tex = {},
        .kind = infix_v,
    },
    {
        .input = "stackrel",
        .tag = "mover",
        .output = "stackrel",
        .tex = {},
        .kind = binary_v,
    },
    {
        .input = "overset",
        .tag = "mover",
        .output = "stackrel",
        .tex = {},
        .kind = binary_v,
    },
    {
        .input = "underset",
        .tag = "munder",
        .output = "stackrel",
        .tex = {},
        .kind = binary_v,
    },
    {
        .input = "_",
        .tag = "msub",
        .output = "_",
        .tex = {},
        .kind = infix_v,
    },
    {
        .input = "^",
        .tag = "msup",
        .output = "^",
        .tex = {},
        .kind = infix_v,
    },
    {
        .input = "hat",
        .tag = "mover",
        .output = "\u005E",
        .tex = {},
        .kind = unary_v,
        .acc = true,
    },
    {
        .input = "bar",
        .tag = "mover",
        .output = "\u00AF",
        .tex = "overline",
        .kind = unary_v,
        .acc = true,
    },
    {
        .input = "vec",
        .tag = "mover",
        .output = "\u2192",
        .tex = {},
        .kind = unary_v,
        .acc = true,
    },
    {
        .input = "dot",
        .tag = "mover",
        .output = ".",
        .tex = {},
        .kind = unary_v,
        .acc = true,
    },
    {
        .input = "ddot",
        .tag = "mover",
        .output = "..",
        .tex = {},
        .kind = unary_v,
        .acc = true,
    },
    {
        .input = "overarc",
        .tag = "mover",
        .output = "\u23DC",
        .tex = "overparen",
        .kind = unary_v,
        .acc = true,
    },
    {
        .input = "ul",
        .tag = "munder",
        .output = "\u0332",
        .tex = "underline",
        .kind = unary_v,
        .acc = true,
    },
    {
        .input = "ubrace",
        .tag = "munder",
        .output = "\u23DF",
        .tex = "underbrace",
        .kind = unaryunderover_v,
        .acc = true,
    },
    {
        .input = "obrace",
        .tag = "mover",
        .output = "\u23DE",
        .tex = "overbrace",
        .kind = unaryunderover_v,
        .acc = true,
    },
    {
        .input = "text",
        .tag = "mtext",
        .output = "text",
        .tex = {},
        .kind = text_v,
    },
    {
        .input = "mbox",
        .tag = "mtext",
        .output = "mbox",
        .tex = {},
        .kind = text_v,
    },
    {
        .input = "color",
        .tag = "mstyle",
        .kind = binary_v,
    },
    {
        .input = "id",
        .tag = "mrow",
        .kind = binary_v,
    },
    {
        .input = "class",
        .tag = "mrow",
        .kind = binary_v,
    },
    {
        .input = "cancel",
        .tag = "menclose",
        .output = "cancel",
        .tex = {},
        .kind = unary_v,
    },
    {
        .input = "\"",
        .tag = "mtext",
        .output = "mbox",
        .tex = {},
        .kind = text_v,
    },
    {
        .input = "bb",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "bold",
        .output = "bb",
        .tex = {},
        .kind = unary_v,
    },
    {
        .input = "mathbf",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "bold",
        .output = "mathbf",
        .tex = {},
        .kind = unary_v,
    },
    {
        .input = "sf",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "sans-serif",
        .output = "sf",
        .tex = {},
        .kind = unary_v,
    },
    {
        .input = "mathsf",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "sans-serif",
        .output = "mathsf",
        .tex = {},
        .kind = unary_v,
    },
    {
        .input = "bbb",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "double-struck",
        .output = "bbb",
        .tex = {},
        .kind = unary_v,
        //       codes : AMbbb
    },
    {
        .input = "mathbb",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "double-struck",
        .output = "mathbb",
        .tex = {},
        .kind = unary_v,
        //       codes : AMbbb
    },
    {
        .input = "cc",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "script",
        .output = "cc",
        .tex = {},
        .kind = unary_v,
        //       codes : AMcal
    },
    {
        .input = "mathcal",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "script",
        .output = "mathcal",
        .tex = {},
        .kind = unary_v,
        //       codes : AMcal
    },
    {
        .input = "tt",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "monospace",
        .output = "tt",
        .tex = {},
        .kind = unary_v,
    },
    {
        .input = "mathtt",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "monospace",
        .output = "mathtt",
        .tex = {},
        .kind = unary_v,
    },
    {
        .input = "fr",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "fraktur",
        .output = "fr",
        .tex = {},
        .kind = unary_v,
        //       codes : AMfrk
    },
    {
        .input = "mathfrak",
        .tag = "mstyle",
        .atname = "mathvariant",
        .atval = "fraktur",
        .output = "mathfrak",
        .tex = {},
        .kind = unary_v,
        //       codes : AMfrk
    }};

/// Find a symbol in the symbol table
constexpr auto find_symbol_def(std::string_view const &sv) {
  return std::find_if(
      std::begin(symbol_table), std::end(symbol_table),
      [&sv](symbol_def_t const &def) -> bool { return sv == def.input; });
}

/// Filter symbols using a predicate
template <std::predicate<symbol_def_t> auto Pred>
static constexpr auto symbols_by_pred = []() {
  // Generates a vector filtered using predicate Pred
  constexpr auto gen_filtered_vector = []() -> std::vector<symbol_def_t> {
    std::vector<symbol_def_t> symbols;
    symbols.reserve(std::size(symbol_table));
    std::copy_if(std::begin(symbol_table), std::end(symbol_table),
                 std::back_inserter(symbols), Pred);
    return symbols;
  };

  // Getting constexpr size
  constexpr std::size_t Size = gen_filtered_vector().size();

  // Initializing array
  std::vector<symbol_def_t> res_v = gen_filtered_vector();
  std::array<symbol_def_t, Size> res;
  std::copy(res_v.begin(), res_v.end(), res.begin());

  // Sorting by input token size
  std::sort(res.begin(), res.end(),
            [](symbol_def_t const &a, symbol_def_t const &b) -> bool {
              return a.input.size() > b.input.size();
            });

  return res;
}();

/// Filter symbols using a predicate
template <token_kind_t Kind>
inline static constexpr auto symbols_by_kind =
    symbols_by_pred<[](symbol_def_t const &def) -> bool {
      return def.kind == Kind;
    }>;

} // namespace asciimath::symbols
